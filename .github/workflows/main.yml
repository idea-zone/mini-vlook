on:
  push:
    branches:
      - main

name: release-please-2
jobs:
  release-please:
    runs-on: ubuntu-latest
    steps:
      # Create release
      - name: Create release
        uses: google-github-actions/release-please-action@v3
        id: release
        with:
          release-type: node
          package-name: release-please-action
          ## branch to open pull release PR against (detected by default)
          default-branch: main
          ## Should breaking changes before 1.0.0 produce minor bumps? Default false
          bump-minor-pre-major: true
          ## Should feat changes before 1.0.0 produce patch bumps instead of minor bumps? Default false
          bump-patch-for-minor-pre-major: true
          ## If set, create releases that are pre-major or pre-release version marked as pre-release on GitHub. Defaults false
          prerelease: true
          ## header used within the release PR body, defaults to using :robot: I have created a release *beep* *boop*
          pull-request-header: ':robot: A new release will be created'
          ## A JSON formatted String containing to override the outputted changelog sections
          changelog-types: '[{"type":"feat","section":"Features","hidden":false},{"type":"fix","section":"Bug Fixes","hidden":false},{"type":"refactor","section":"Code Refactoring","hidden":false},{"type":"chore","section":"Miscellaneous","hidden":false},{"type":"perf","section":"Performance Improvements","hidden":false}]'

      # Checkout
      - name: Checkout
        #if: ${{ steps.release.outputs.release_created }}
        uses: actions/checkout@v3

      # # Install Node.js
      # - name: Install Node.js
      #   if: ${{ steps.release.outputs.release_created }}
      #   uses: actions/setup-node@v3
      #   with:
      #     node-version: 18
      #     registry-url: 'https://registry.npmjs.org'

      # # Install pnpm
      # - name: Install pnpm
      #   if: ${{ steps.release.outputs.release_created }}
      #   uses: pnpm/action-setup@v2
      #   id: pnpm-install
      #   with:
      #     version: 8
      #     run_install: false

      # # Get pnpm store directory
      # - name: Get pnpm store directory
      #   if: ${{ steps.release.outputs.release_created }}
      #   id: pnpm-cache
      #   shell: bash
      #   run: |
      #     echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

      # # Setup pnpm cache
      # - name: Setup pnpm cache
      #   if: ${{ steps.release.outputs.release_created }}
      #   uses: actions/cache@v3
      #   with:
      #     path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
      #     key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
      #     restore-keys: |
      #       ${{ runner.os }}-pnpm-store-

      # # Install dependencies
      # - name: Install dependencies
      #   if: ${{ steps.release.outputs.release_created }}
      #   run: pnpm install

      # # Build for production
      # - name: Build for production
      #   if: ${{ steps.release.outputs.release_created }}
      #   run: pnpm build

      # Archive package
      - name: Archive package
        #if: ${{ steps.release.outputs.release_created }}
        uses: vimtor/action-zip@v1
        with:
          files: dist/
          recursive: false
          dest: package.zip

      # Upload package to release
      - name: Upload package.zip to the release
        #if: ${{ steps.release.outputs.releases_created }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release upload ${{ steps.release.outputs.tag_name }} package.zip
